/**
 * Created by pzheng on 28/04/2017.
 */
'use strict';
var ModelDefiner = require('../firebirdModelDefiner.js'),
  config = require('../config/config.js'),
  helpers = require('../helpers'),
  _ = require('underscore'),
  validator = require('validator'),
  userRoles = require('../config/constants').userRoles,
  async = require('async'),
  SoftwareModel = {};

var Software = ModelDefiner.define(config.db, "softwares");

function getSoftwares(callback) {
  var JsonData = [];
  var software = new Software();
  var sql = "select * from tl_software";
  software.query(sql, function(error, results, fields) {
    if(error) {
      callback(error);
    } else {
      callback(null, results, fields);
    }
  });
}

function wrapJson(results, fields, callback) {
  var JsonData = helpers.wrapJson(results, fields);
  callback(null, JsonData);
}

async.waterfall([getSoftwares, wrapJson], function(err, result) {
  // console.log('Software types:', result);
  SoftwareModel.softwares = _.clone(result) || [];
});

SoftwareModel = {
  addSoftware: function ( data, callback) {
    var self = this;

    console.log('data to be added', data)
    // var content = { // id generated by database rather than the server
    /*id: _.max(users, function (user) {
     return user.id;
     }).id + 1,
     */
    // };
    var content = data;
    var software = new Software(content);
    software.save(function(err, results, db) {
      if (results) {
        content.id = Object.keys(results).map(function (key) { //id returned from db
          return results[key];
        })[0];
      }
      if (content.id) {
        console.log(self.softwares);
        Array.prototype.push.call(self.softwares, content);
        if (callback) {
          callback(null, content);
        }
      }
      else {
        err = "Fail to get valid id from database";
        if(callback) {
          callback(err, content);
        }
      }
      db.detach();
    });
  },

  updateSoftware: function(data, callback) {
    var software = new Software(data);
    software.save(callback);
  },

  deleteSoftware: function(data, callback) {
    var self = this;
    var software = new Software(data);
    var err;
    if (self.findById(data.id) !== undefined) {
      software.remove();
    } else {
      err = "Could not find key information to delete software";
    }
    if( callback ) {
      callback(err, data);
    }
  },

  findByProviderId: function (provider, id) {
    var self = this;
    return _.find(self.users, function (software) {
      return software[provider] === id;
    });
  },

  findAll: function () {
    var self = this;
    return _.map(self.softwares, function (software) {
      return _.clone(software);
    });
  },

  findById: function (id) {
    var self = this;
    return _.clone(_.find(self.softwares, function (softwares) {
      return softwares.id == id;
    }));
  },
}

module.exports = SoftwareModel;
